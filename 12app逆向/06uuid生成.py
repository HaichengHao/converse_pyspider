"""
@File    :06uuid生成.py
@Editor  : 百年
@Date    :2025/5/3 9:32 
"""

'''
**UUID（Unique Identifier）** 是唯一标识符，用于区分计算机中的不同文件、设备或资源。 UUID 由数字字符组成，通常长度为
128到200位，使用大写或小写字母。

### 应用场景
1. **文件存储**：如操作系统、数据库表名。
2. **设备识别**：如移动终端的设备ID。
3. **网络通信**：用于传输链路介质上的信息。
4. **计算机设备**：区分服务器或其他设备。

### 优点
- **唯一性**：确保数据的唯一标识。
- **安全性**：便于存储和传输，减少冲突。
- **可扩展性**：适应不同规模的系统需求。

### 缺点
- **计算成本高**：生成和验证 UUID 比较麻烦。
- **难以随机生成**：手动设置不太容易。
- **使用场景受限**：适合特定领域，不适用于所有情况。

总结来说，UUID 是一个强大的唯一标识工具，但在某些大而复杂的应用中可能不可行。'''



import uuid

uuid_ = str(uuid.uuid4())

print(uuid_)

'''
310bbdb7-3bbb-4a94-b099-82c73199f68c'''

'''

1. **前缀（Prefix）**：这是随机生成的部分，用于标识组织、工厂或其他特定类别中的设备。例如，“310”可能表示某个特定的
生产批次或地区。

2. **中央生成器字段（Central Generation Field, CGF）**：这部分也称为制造序列号，通常由四到五个小写字母和数字组成，它
标识设备的制造批次、生产区域或其他生产信息。例如，“bbdb7”可能表示某个特定的生产区域或型号。

3. **设备代码（Device Code）**：这是唯一标识符，包含硬件特定属性的信息，如制造商信息、产品线、型号等。这部分通常分为
四部分，每部分由四个字符组成，比如“3a94-b099-82c7-3199-f68c”。

整个UUID结构如下：

```
[Prefix]-[Central Generation Field (CGF)]-[Device Code]
```

例如，UUID 310bbdb7-3bbb-4a94-b099-82c7-3199-f68c 分解为：
- **310**：前缀
- **bbdb7**：中央生成器字段（CGF）
- **3a94-b099-82c7-3199-f68c**：设备代码

每个部分的信息有助于区分和管理不同的设备，确保唯一性。'''