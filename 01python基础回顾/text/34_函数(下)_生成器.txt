生成器(generator)的本质就是迭代器
生成器使用得当可以节省内存
创建生成器的两种方案
    1.生成器函数
        生成器函数中有一个关键字yield
        生成器执行的时候，得到的是生成器，并不会执行函数，得到的是生成器
        只要函数中出现了yield,它就是一个生成器函数
          yield的作用: 1 可以返回数据
                      2 可以分段执行函数中的内容(与return相比，其不会终止程序，不像return那样运行完之后就不管之后的内容)，
                       通过next(iter)可以执行到下一个yield的位置

    2.生成器表达式 (先看p35推导式)
            (数据 for循环[if判断])
            gen_lst=list(gen)

            打印输出生成器data的列表可以直接通过list将其转化
            print(gen_lst)
            # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

            # 如果再次打印list(gen)会是一个空列表
            print(list(gen))
            # []
            # 为什么呢，因为之前生成器的内容已经迭代完了

            # 隐含内容，list和set本身就是有一个循环迭代在里边的
            # 例如
            s='周芷若'
            lst=list(s)
            print(lst)
            # ['周', '芷', '若']